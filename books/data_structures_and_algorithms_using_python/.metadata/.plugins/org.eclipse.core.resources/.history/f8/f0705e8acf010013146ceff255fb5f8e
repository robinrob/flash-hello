class Date:

    def __init__(self, year, month, day):
        self.julian_day = 0
        assert self._is_valid_gregorian(year, month, day), \
                "Invalid Gregorian date."

        tmp = 0
        if month < 3:
            tmp = -1

        self.julian_day = day - 32075 + \
                (1461 * (year + 4800 + tmp) // 4) + \
                (367 * (month -2 - tmp * 12 // 12)) - \
                (3 * ((year + 4900 + tmp) // 100 //4))


    def __lt__(self, other_date):
        return self.julian_day < other_date.julian_day

    def __le__(self, other_date):
        return self.julian_day <= other_date.julian_day

    def to_gregorian(self):
        A = self._julianDay + 68569
        B = 4 * A // 146097
        A = A - (146097 * B + 3) // 4
        year = 4000 * (A + 1) // 1461001
        A = A - (1461 * year // 4) + 31
        month = 80 * A // 2447
        day = A - (2447 * month // 80)
        A = month // 11
        month = month + 2 - (12 * A)
        year = 100 * (B - 49) + year + A
        return  month, day, year

    def _is_valid_gregorian(self, year, month, day):
        max_feb_days = 29 if self._is_leap_year(year) else 28
        
        max_month_days = {1  : 31,
                          2  : max_feb_days,
                          3  : 31,
                          4  : 30,
                          5  : 31,
                          6  : 30,
                          7  : 31,
                          8  : 31,
                          9  : 30,
                          10 : 31,
                          11 : 30,
                          12 : 31}
        if year is 4713 and month < 11:
            return False
            
        if year is 4713 and month is 11 and day < 15:
            return False
        
        if month > 12:
            return False
        
        if day > max_month_days[month]:
            return False
        
        return True
        
    def _is_leap_year(self, year):
        return False